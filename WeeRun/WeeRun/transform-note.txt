7 bit
1 sign
6 bit

|0		|.0.00000|
|Signt	|

problems:
6 bit go up to 63 only
umm.... welll 

21 * 10^-1 = 2.1

val >= 1

but... Well we are left to have too little amount of bits.. lets umm compromise

We cannot remove bits from 7 bits without losing too much precision (it is pretty bad already with preceision)

let us set to some more problems what if we use only 4 bit for vectorPoint representation so we need 15 bit in total
Nicee right? in other words we can have one bit more in cost of having small rooms in theory. hmm so since our value is normalized one 
we will need data about length of the wall right? well welcome to math we can just calculate it from point's distance and that is wall's length and use it to get corrected value in world position

and this way we may be able to keep our 255 x255 rooms in reasonable sizes and still providing us ok amount of info with precision
wait where was I? oh yeah 8bit if we use 3 to exponent and we are left with 5 with maximum of 32 unique numbers we are short handed
well one way to fix it. alright 
35*10^-3 = well something random.... (0.035)

so... we ditch idea of exponents like in IEE single precisions 
and we use one bit as a sign bit |0|0000000|
so that we can use very small numbers. like 0.0 something
yay now we can have kinda like float in normalized float in 8bit? kinda 
remember that correction s**t I talked earlier it is still needed and our little 
but... we have still many values where 7bit's does not use all bits aka in normal scenario it need's only 0-100 well umm we need better approach but for now we use our brain to add second dimension into this shit
so one way is to itroduce second dimension by adding third vectorpoint welll we can fix the issue by adding it but... we are already on probleems... you see wee need some way to store 5 values in 3 values... now comes bit operations
well I hope atleast so we you propably saw xor sht on there  I am starting to wonder is 30 bit maximum where can I go? or with this 28 bits? well we are left with 4 bits and 3 places where to put these right? CORRECT into our very nice thingy and now we can have 10 bits in our little show precision in otherors 2 bits or up to 10^-4 in scientific notation or what ever...

but... we again do not need that much we need only umm wait.. 3 exponent 2 is used so we have to draw some graphs right? 
so we 

lets run some python code to see some results with.... 
so our precision is most precise more closer we are the point but on the other hand that is the mos vulnerable point of our map
aka with colliders it is needed to and if we make it so it get's the next closest pillar to grip on to and use it as root wee do not needto cry about precision that mutch right?
atleast I hope so we can go now crazy low numbers with 9bits and sign bit so we can kinda have now pretty precise all around let's see
you see since 
 and just realized since we have 32 bit before it would be wiser to use 2 float we can now store one 7 bit to y or better if our player cannot jump it does not need to have that preecise what if we umm give 16 y levels since 4 bit can hold up to 16 unique number
 and player will never fall right? we lose precision but oh boy it is fun:D or lets make them dynamic and give 5 bits for it so we can have 1 sign bit to get get positions to in signed versions so up to +- 16 but wait aren't we now in dilemma? nothing cannot be on same level as our player? right? well.. bruh i go sleep now lol it is 1 am ....

